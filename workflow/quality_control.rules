import pandas as pd
configfile: "configs/config_main.yaml"

key = config["KEY"]
input_path = config["READSPATH"]
samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
end = config["END"]
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"]
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"]

rule end:
    input:
        report = final_path + "/fastqc/report_quality_control.html"
        
if end == "pair":
    rule getReads:
        output:
            forward = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            reverse = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            #shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.forward}"),
            #shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.reverse}")
            shell("echo creating link {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.reverse}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.reverse}"),
            shell("echo creating link {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.forward}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.forward}")

            
    rule qualityControl:
        input:
            forward = intermediate_path + "/reads/{sample}_forward.fastq.gz",
            reverse = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
        output:
            fastqc_forward = final_path + "/fastqc/{sample}_forward_fastqc.html",
            fastqc_reverse = final_path + "/fastqc/{sample}_reverse_fastqc.html"
        conda:
            "env.yaml"
        params:
            outputpath = final_path + "/fastqc"
        shell:
            "fastqc -t $(({config[NCORE]}+0)) -o {params.outputpath} {input.forward} && "
            "fastqc -t $(({config[NCORE]}+0)) -o {params.outputpath} {input.reverse}"
            
    rule summaryReport:
        input:
            fastqc_forward = expand(final_path + "/fastqc/{sample}_forward_fastqc.html", sample = samples),
            fastqc_reverse = expand(final_path + "/fastqc/{sample}_reverse_fastqc.html", sample = samples)
        output:
            report = final_path + "/fastqc/report_quality_control.html"
        conda:
            "env.yaml"
        params:
            path = final_path + "/fastqc"
        shell:
            "multiqc {params.path} --filename {output.report}"
            
else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("scp -i {params.key} {params.input_path}/{wildcards.sample}*.f*q.gz {output.read}")
            
    rule qualityControl:
        input:
            read = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            fastqc = final_path + "/fastqc/{sample}_fastqc.html"
        conda:
            "env.yaml"
        params:
            outputpath = final_path + "/fastqc"
        shell:
            "fastqc -t $(({config[NCORE]}+0)) -o {params.outputpath} {input.read}"
            
    rule summaryReport:
        input:
            fastqc = expand(final_path + "/fastqc/{sample}_fastqc.html", sample = samples)
        output:
            report = final_path + "/fastqc/report_quality_control.html"
        conda:
            "env.yaml"
        params:
            path = final_path + "/fastqc"
        shell:
            "multiqc {params.path} --filename {output.report}"
    
