import pandas as pd
import numpy as np

configfile: "config_ongoing_run.yaml"


counter = config["COUNTER"]
mapper = config["ALIGNER"]
tool = config["DEATOOL"]
input_path = config["RESULTPATH"] + "/" + config["PROJECT"] + "/mapping_" + mapper + "/counting_"+counter
repeats_path = config["RESULTPATH"] + "/" + config["PROJECT"] + "/mapping_" + mapper + "/repeats_"+counter
repeats_output_path = repeats_path + "/DEA_"+tool+"/" 
samples = np.array(pd.read_table(config["METAFILE"], header = 0)['sample'])
groups = np.unique(np.array(pd.read_table(config["METAFILE"], header = 0)['group']))
control = config["CONTROL"][0]
treat = config["TREAT"][0]
TEanalysis = config["REPEATS"]
from_counts = config["FROMCOUNTS"]

if from_counts != "no" and from_counts != False :   
    TEanalysis = "no"  ## deactivate repeat analysis when starting from count tables
    count_path = from_counts + "/"
    input_path = config["RESULTPATH"] + "/" + config["PROJECT"] + "/fromExternalCounts" 
else:
    count_path = input_path + "/countTables/"
    
output_path = input_path + "/DEA_"+tool+"/" 

if TEanalysis == "yes" or TEanalysis==True: 
    pca_repeats = repeats_path +"/PCA_TE.pdf"
    volcano_repeats = repeats_output_path + "Report/plots/volcano_plot_" + control + "_" + treat + ".pdf"
    dea_repeats = repeats_output_path + "Tables/dea_" + control + "_" + treat + ".tsv"
    glimma_repeats = repeats_output_path + "Report/Glimma/MDPlot_"+ control + "_" + treat + ".html"
else :
    pca_repeats = []
    volcano_repeats = []
    dea_repeats = []
    glimma_repeats = []

rule all:
    input: 
        pca_repeats,
        volcano_repeats,
        dea_repeats,
        glimma_repeats,
        pca = input_path + "/PCA.pdf",
        volcano = output_path + "Report/plots/volcano_plot_" + control + "_" + treat + ".pdf",
        dea = output_path + "Tables/dea_" + control + "_" + treat + ".tsv",
        glimma = output_path + "Report/Glimma/MDPlot_"+ control + "_" + treat + ".html"

       
rule PCA:
    input:
        countF = expand(count_path +"{sample}_countGenes.tsv", sample=samples)
    output:
        pca = input_path + "/PCA.pdf"
    conda:
        "env.yaml"
    params:
        count_path = count_path,
        output = input_path
    shell:
        "Rscript scripts/pca.R {params.count_path}  _countGenes.tsv {params.output}"
        
        
rule combineSamples:
    input:
        countF = expand(count_path + "{sample}_countGenes.tsv", sample=samples)
    output:
        groupCount = expand(count_path + "{group}_countsGenes.tsv", group = groups)
    conda:
        "env.yaml"
    params:
        count_path = count_path
    shell:
        "python scripts/combine2group_genome.py {params.count_path} _countGenes.tsv _countsGenes.tsv"
        
        
rule DEA:
    input:
        groupCount = expand(count_path + "{group}_countsGenes.tsv", group = groups)
    output:
        volcano = output_path + "Report/plots/volcano_plot_" + control + "_" + treat + ".pdf",
        dea = output_path + "Tables/dea_" + control + "_" + treat + ".tsv",
        glimma = output_path + "Report/Glimma/MDPlot_"+ control + "_" + treat + ".html"
    conda:
        "env.yaml"
    params:
        output_path = output_path,
        counts_path = count_path + ""
    shell:
        "Rscript scripts/dea_genome.R {params.counts_path} {params.output_path} _countsGenes.tsv"


if TEanalysis == "yes" or TEanalysis==True:
    rule TE_PCA:
        input: 
            countT = expand(repeats_path + "/countTables/{sample}_countTE.tsv", sample=samples)
        output:
            pca_repeats = repeats_path +"/PCA_TE.pdf"
        conda:
            "env.yaml"  
        params:
            count_path = repeats_path + "/countTables/",
            output = repeats_path
        shell:
            "Rscript scripts/pca.R {params.count_path}  _countTE.tsv {params.output}"  
            
    rule TE_combineSamples:
        input:
            countT = expand(repeats_path + "/countTables/{sample}_countTE.tsv", sample=samples)
        output:
            groupCount = expand(repeats_path + "/countTables/{group}_countsTE.tsv", group = groups)
        conda:
            "env.yaml"
        params:
            count_path = repeats_path +"/countTables/"
        shell:
            "python scripts/combine2group_genome.py {params.count_path} _countTE.tsv _countsTE.tsv"
            
            
    rule TE_DEA:
        input:
            groupCount = expand(repeats_path + "/countTables/{group}_countsTE.tsv", group = groups)
        output:
            volcano = repeats_output_path + "Report/plots/volcano_plot_" + control + "_" + treat + ".pdf",
            dea = repeats_output_path + "Tables/dea_" + control + "_" + treat + ".tsv",
            glimma = repeats_output_path + "Report/Glimma/MDPlot_"+ control + "_" + treat + ".html"
        conda:
            "env.yaml"
        params:
            output_path = repeats_output_path ,
            counts_path = repeats_path + "/countTables/"
        shell:
            "Rscript scripts/dea_genome.R {params.counts_path} {params.output_path} _countsTE.tsv"

