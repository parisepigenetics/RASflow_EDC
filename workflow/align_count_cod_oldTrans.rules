import pandas as pd
configfile: "../configs/config_align_count.yaml"

samples = pd.read_table(config["METAFILE"], header = 0)['sample']
indexes = list(range(1, 9))

rule all:
    input:
        formatCount = expand(config["FINALOUTPUT"] + "/countFile/{sample}_count.csv", sample = samples)

rule indexTrans:
    input:
        trans = config["TRANS"]
    output:
        indexes = expand(config["OUTPUTPATH"] + "/indexes/index.{index}.ht2", index = indexes)
    params:
        index = config["OUTPUTPATH"] + "/indexes/index"
    shell:
        "hisat2-build -p {config[NCORE]} {input.trans} {params.index}"

rule getReads:
    input:
        key = config["KEY"]
    output:
        forward = temp(config["OUTPUTPATH"] + "/reads/{sample}_forward.fastq.gz"),
        reverse = temp(config["OUTPUTPATH"] + "/reads/{sample}_reverse.fastq.gz")
    run:
        shell("scp -i {input.key} {config[NELSIN]}/{wildcards.sample}_*_R1_001.fastq.gz {output.forward}")
        shell("scp -i {input.key} {config[NELSIN]}/{wildcards.sample}_*_R2_001.fastq.gz {output.reverse}")

rule alignment:
    input:
        index = expand(config["OUTPUTPATH"] + "/indexes/index.{index}.ht2", index = indexes),
        forward = config["OUTPUTPATH"] + "/reads/{sample}_forward.fastq.gz",
        reverse = config["OUTPUTPATH"] + "/reads/{sample}_reverse.fastq.gz"
    output:
        sam = temp(config["OUTPUTPATH"] + "/samFile/{sample}.sam"),
        bam = config["OUTPUTPATH"] + "/bamFile/{sample}.bam"
    params:
        index = config["OUTPUTPATH"] + "/indexes/index"
    benchmark:
        config["OUTPUTPATH"] + "/benchmarks/{sample}.hisat2.benchmark.txt"
    shell:
        "hisat2 -p {config[NCORE]} -x {params.index} -1 {input.forward} -2 {input.reverse} -S {output.sam}"
        " && samtools view -b -S {output.sam} > {output.bam}"

rule sortIndex:
    input:
        bam = config["OUTPUTPATH"] + "/bamFile/{sample}.bam"
    output:
        sort = temp(config["OUTPUTPATH"] + "/bamFileSort/{sample}.sort.bam")
    shell:
        "samtools sort {input.bam} -o {output.sort} && samtools index {output.sort}"

rule featureCount:
    input:
        sort = config["OUTPUTPATH"] + "/bamFileSort/{sample}.sort.bam"
    output:
        count = config["OUTPUTPATH"] + "/countFile/{sample}.count"
    shell:
        "samtools idxstats {input.sort} > {output.count}"

rule mergeTransGene:
    input:
        transCount = config["OUTPUTPATH"] + "/countFile/{sample}.count"
    output:
        geneCount = config["OUTPUTPATH"] + "/countFile/{sample}.countmerged.idx"
    shell:
        "cd ../scripts && javac -cp opencsv-1.8.jar:. sumgenescod.java && java -cp opencsv-1.8.jar:. sumgenescod codgenelist.csv {input}"

rule formatCount:
    input:
        geneCount = config["OUTPUTPATH"] + "/countFile/{sample}.countmerged.idx"
    output:
        formatCount = config["FINALOUTPUT"] + "/countFile/{sample}_count.csv"
    shell:
        "sh ../scripts/formatCount.sh {input.geneCount} {output.formatCount}"
