import pandas as pd
configfile: "config_ongoing_run.yaml"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
trimmed = config["TRIMMED"]
if trimmed:
    input_path = config["BIGDATAPATH"] + "/" + config["PROJECT"] + "/trimming"
else:
    input_path = config["READSPATH"]
key = config["KEY"]
seqtype = config["END"]
intermediate_path = config["BIGDATAPATH"] + "/" + config["PROJECT"] + "/Salmon"
final_path = config["RESULTPATH"] + "/" + config["PROJECT"] + "/Salmon"

# add full path for the symlinks
if input_path[0] != "/": 
    import os
    input_path = os.getcwd()+"/"+input_path

rule end:
    input:
        report = final_path + "/report_quantify.html",
        pca = final_path + "/PCA.pdf"
        
# get singularity image
rule download_singularity_img: 
    output: 
        "rasflow_edc.simg"
    shell:
        "wget https://zenodo.org/record/7267598/files/rasflow_edc.simg"

### get reads (for now simlink, could be removed / replaced by copy of the files)            
if seqtype == "pair":
    rule getReads:
        output:
            fw = intermediate_path + "/reads/{sample}_fw.fastq.gz",
            rv = intermediate_path + "/reads/{sample}_rv.fastq.gz"
        shell:
            """
            ln -s {input_path}/{wildcards.sample}_*R1*.f*q.gz {output.fw}
            ln -s {input_path}/{wildcards.sample}_*R2*.f*q.gz {output.rv}
            """
else:
    rule getReads:
        output:
            read = intermediate_path + "/reads/{sample}.fastq.gz"
        run:
            shell("ln -s {input_path}/{wildcards.sample}_*.f*q.gz {output.read}")            
            
            
rule indexTrans:
    input:
        sing = "rasflow_edc.simg",
        trans = config["TRANS"]
    output:
        index = directory(intermediate_path + "/transcripts_index")
    singularity:
        "rasflow_edc.simg"
    shell:
        "salmon index -t {input.trans} -i {output.index} -k 31 -p 8"   # k=length of the kmers (default)

if seqtype == "pair":
    rule quantify:
        input:
            fw = intermediate_path + "/reads/{sample}_fw.fastq.gz",
            rv = intermediate_path + "/reads/{sample}_rv.fastq.gz",
            index = intermediate_path + "/transcripts_index"
        output:
            quant = final_path + "/quantification/{sample}/quant.sf",
            tpm = final_path + "/quantification/{sample}_tpm.tsv"
        singularity:
            "rasflow_edc.simg"
        params:
            quant_dir = final_path + "/quantification/{sample}"
        shell:
            """
            salmon quant -i {input.index} -l A -1 {input.fw} -2 {input.rv} -o {params.quant_dir} -p 8 --seqBias --useVBOpt --validateMappings
            awk 'NR==1{{next}}{{print $1"\\t"$4}}' {output.quant} > {output.tpm}
            """
else:
    rule quantify:
        input:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz"),
            index = intermediate_path + "/transcripts_index"
        output:            
            quant = final_path + "/quantification/{sample}/quant.sf",
            tpm = final_path + "/quantification/{sample}_tpm.tsv"
        singularity:
            "rasflow_edc.simg"
        params:
            quant_dir = final_path + "/quantification/{sample}" 
        shell:
            """
            salmon quant -i {input.index} -l A -r {input.read} -o {params.quant_dir} -p 8 --seqBias --useVBOpt --validateMappings
            awk 'NR==1{{next}}{{print $1"\\t"$4}}' {output.quant} > {output.tpm}
            """

rule summaryReport:
    input:
        quant = expand(final_path + "/quantification/{sample}/quant.sf", sample = samples)
    output:
        report = final_path + "/report_quantify.html"
    singularity:
        "rasflow_edc.simg"
    params:
        quant_dir = expand(final_path + "/quantification/{sample}", sample = samples)
    shell:
        "multiqc {params.quant_dir} --filename {output.report}"
        
rule PCA:
    input: 
        quant = expand(final_path + "/quantification/{sample}/quant.sf", sample = samples)
    output:
        pca = final_path + "/PCA.pdf"
    singularity:
        "rasflow_edc.simg"
    params:
        count_path = final_path + "/quantification/"
    shell:
        "Rscript scripts/pca_trans.R {params.count_path} {final_path}"
