configfile: "configs/config_main.yaml"

import pandas as pd
samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']

key = config["KEY"]
input_path = config["READSPATH"]
end = config["END"]
intermediate_path = config["BIGDATAPATH"] + "/" + config["PROJECT"] + "/trim"
final_path = config["RESULTPATH"] + "/" + config["PROJECT"]
trim3 = config["TRIM3"]
trim5 = config["TRIM5"]

if trim5 and trim5 != "no" :    # trim 5end
    if trim3 and trim3 != "no" : # trim also 3end
        if end == "pair":
            options = "--clip_R1  "+str(trim5)+" --clip_R2 "+str(trim5)+" --three_prime_clip_R1 "+str(trim3)+" --three_prime_clip_R2 "+str(trim3)
        else :
            options = "--clip_R1  "+str(trim5)+" --three_prime_clip_R1 "+str(trim3)
    else: # no 3end, only 5end
        if end == "pair":
            options = "--clip_R1  "+str(trim5)+" --clip_R2 "+str(trim5)
        else: 
            options = "--clip_R1  "+str(trim5)
else:
    if trim3 and trim3 != "no" : # only 3end
        if end == "pair":
            options = "--three_prime_clip_R1 "+str(trim3)+" --three_prime_clip_R2 "+str(trim3)
        else :
            options = "--three_prime_clip_R1 "+str(trim3)
    else: # no triming of a fix number of bases
        options = ""

if input_path[0] != "/": 
    import os
    input_path = os.getcwd()+"/"+input_path

def trimFiles(wildcards):
    if (end == "pair"):
        forward_trim = expand(intermediate_path + "/{sample}_R1_trimmed.fq.gz", sample = samples)
        return forward_trim
    else:
        read_trim = expand(intermediate_path + "/{sample}_trimmed.fq.gz", sample = samples)
        return read_trim

rule all:
    input:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"

if end == "pair":
    rule getReads:
        output:
            fw = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            rv = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.fw}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.rv}")

    rule trim:
        input:
            fw = intermediate_path + "/reads/{sample}_forward.fastq.gz",
            rv = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
        output:
            shforward = intermediate_path + "/{sample}_R1_trimmed.fq.gz",
            shreverse = intermediate_path + "/{sample}_R2_trimmed.fq.gz"
        conda:
            "env.yaml"
        params:
            outputpath = intermediate_path,
            outputrename = intermediate_path+"/"
        shell:
            "trim_galore {options} --fastqc --j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.fw} {input.rv} && rename _val_1 _R1_trimmed {params.outputrename}{wildcards.sample}*  && rename _val_2 _R2_trimmed {params.outputrename}{wildcards.sample}*"
    
   
   #### single end, to test
else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}*.f*q.gz {output.read}")
            
    rule trimS:
        input:
            read = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            read_trim = intermediate_path + "/{sample}_trimmed.fq.gz"
        conda:
            "env.yaml"        
        params:
            outputpath = intermediate_path
        shell:
            "trim_galore {options} --fastqc -j 4 --basename {wildcards.sample} -o {params.outputpath} {input.read} && rename _val _trimmed {params.outputrename}{wildcards.sample}*"

rule summaryReport:
    input:
        trimFiles
    output:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"
    conda:
        "env.yaml"
    params:
        path = intermediate_path
    shell:
        "multiqc {params.path} --filename {output.report}"
