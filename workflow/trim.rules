import pandas as pd
configfile: "configs/config_main.yaml"

key = config["KEY"]
input_path = config["READSPATH"]
samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
end = config["END"]
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/trim"
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"]
trim3 = config["TRIM3"]
trim5 = config["TRIM5"]

def trimFiles(wildcards):
    if (end == "pair"):
        forward_trim = expand(intermediate_path + "/{sample}_R1_val_1.fq.gz", sample = samples)
        return forward_trim
    else:
        read_trim = expand(intermediate_path + "/{sample}_trimmed.fq.gz", sample = samples)
        return read_trim

rule all:
    input:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"

if end == "pair":
    rule getReads:
        output:
            fw = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            rv = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.fw}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.rv}")
    if trim3 != "no" :
        rule trimstart:
            input:
                fw = intermediate_path + "/reads/{sample}_forward.fastq.gz",
                rv = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
            output:
                shforward = temp(intermediate_path + "/{sample}_forward." + str(trim3) + "bp_3prime.fq.gz"),
                shreverse = temp(intermediate_path + "/{sample}_reverse." + str(trim3) + "bp_3prime.fq.gz")
            conda:
                "env.yaml"
            params:
                outputpath = intermediate_path
            shell:
                "trim_galore --hardtrim3 {trim3} --j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.fw} {input.rv}"

        if trim5 < trim3 :
            rule trimend:
                input:
                    shforward = intermediate_path + "/{sample}_forward." + str(trim3) + "bp_3prime.fq.gz",
                    shreverse = intermediate_path + "/{sample}_reverse." + str(trim3) + "bp_3prime.fq.gz"
                output:
                    endforward = temp(intermediate_path + "/{sample}_forward." + str(trim3) +"bp_3prime."+str(trim5) + "bp_5prime.fq.gz"), #Test_forward.91bp_3prime.89bp_5prime.fq.gz
                    endreverse = temp(intermediate_path + "/{sample}_reverse." + str(trim3) + "bp_3prime."+str(trim5) + "bp_5prime.fq.gz")
                conda:
                    "env.yaml"
                params:
                    outputpath = intermediate_path
                shell:
                    "trim_galore --hardtrim5 {trim5} --j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.shforward} {input.shreverse}"
            rule trim:
                input:
                    endforward = temp(intermediate_path + "/{sample}_forward." + str(trim3) +"bp_3prime."+str(trim5) + "bp_5prime.fq.gz"), #Test_forward.91bp_3prime.89bp_5prime.fq.gz
                    endreverse = temp(intermediate_path + "/{sample}_reverse." + str(trim3) + "bp_3prime."+str(trim5) + "bp_5prime.fq.gz")

                output:
                    read_trim_forward = intermediate_path + "/{sample}_R1_val_1.fq.gz",
                    read_trim_reverse = intermediate_path + "/{sample}_R2_val_2.fq.gz"
                conda:
                    "env.yaml"
                params:
                    outputpath = intermediate_path
                shell:
                    "trim_galore --fastqc -j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.endforward} {input.endreverse}"
        else: 
            rule trim:
                input:
                    shforward = intermediate_path + "/{sample}_forward." + str(trim3) + "bp_3prime.fq.gz",
                    shreverse = intermediate_path + "/{sample}_reverse." + str(trim3) + "bp_3prime.fq.gz"
                output:
                    read_trim_forward = intermediate_path + "/{sample}_R1_val_1.fq.gz",
                    read_trim_reverse = intermediate_path + "/{sample}_R2_val_2.fq.gz"
                conda:
                    "env.yaml"
                params:
                    outputpath = intermediate_path
                shell:
                    "trim_galore --fastqc -j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.shforward} {input.shreverse}"
    else:
        rule trim:
            input:
                fw = intermediate_path + "/reads/{sample}_forward.fastq.gz",
                rv = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
            output:
                read_trim_forward = intermediate_path + "/{sample}_R1_val_1.fq.gz",
                read_trim_reverse = intermediate_path + "/{sample}_R2_val_2.fq.gz"
            conda:
                "env.yaml"
            params:
                outputpath = intermediate_path
            shell:
                "trim_galore --fastqc -j 4 --paired --basename {wildcards.sample} -o {params.outputpath} {input.fw} {input.rv}"
           

 
else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}*.f*q.gz {output.read}")
            
    rule trim:
        input:
            read = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            read_trim = intermediate_path + "/{sample}_trimmed.fq.gz"
        conda:
            "env.yaml"        
        params:
            outputpath = intermediate_path
        shell:
            "trim_galore --hardtrim3 {trim3} --fastqc -j 4 --basename {wildcards.sample} -o {params.outputpath} {input.read}"

rule summaryReport:
    input:
        trimFiles
    output:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"
    conda:
        "env.yaml"
    params:
        path = intermediate_path
    shell:
        "multiqc {params.path} --filename {output.report}"

