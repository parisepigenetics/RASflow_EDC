configfile: "config_ongoing_run.yaml"

import pandas as pd
samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']

key = config["KEY"]
input_path = config["READSPATH"]
seqtype = config["END"]
intermediate_path = config["BIGDATAPATH"] + "/" + config["PROJECT"] + "/trimming"
final_path = config["RESULTPATH"] + "/" + config["PROJECT"]
trim3 = config["TRIM3"]
trim5 = config["TRIM5"]

if trim5 and trim5 != "no" :    # trim 5end
    if trim3 and trim3 != "no" : # trim also 3end
        if seqtype == "pair":
            options = "--clip_R1  "+str(trim5)+" --clip_R2 "+str(trim5)+" --three_prime_clip_R1 "+str(trim3)+" --three_prime_clip_R2 "+str(trim3)
        else :
            options = "--clip_R1  "+str(trim5)+" --three_prime_clip_R1 "+str(trim3)
    else: # no 3end, only 5end
        if seqtype == "pair":
            options = "--clip_R1  "+str(trim5)+" --clip_R2 "+str(trim5)
        else: 
            options = "--clip_R1  "+str(trim5)
else:
    if trim3 and trim3 != "no" : # only 3end
        if seqtype == "pair":
            options = "--three_prime_clip_R1 "+str(trim3)+" --three_prime_clip_R2 "+str(trim3)
        else :
            options = "--three_prime_clip_R1 "+str(trim3)
    else: # no triming of a fix number of bases
        options = ""

# add full path for the symlinks
if input_path[0] != "/": 
    import os
    input_path = os.getcwd()+"/"+input_path

def trimFiles(wildcards):
    if (seqtype == "pair"):
        forward_trim = expand(intermediate_path + "/{sample}_R1_clean.fastq.gz", sample = samples)
        return forward_trim
    else:
        read_trim = expand(intermediate_path + "/{sample}_clean.fastq.gz", sample = samples)
        return read_trim

rule all:
    input:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"

rule download_singularity_img: 
    output: 
        "rasflow_edc.simg"
    shell:
        "wget https://zenodo.org/record/7267598/files/rasflow_edc.simg"
        
if seqtype == "pair":
    rule getReads:
        output:
            fw = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            rv = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.fw}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.rv}")

    rule trim:
        input:
            "rasflow_edc.simg",
            fw = intermediate_path + "/reads/{sample}_forward.fastq.gz",
            rv = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
        output:
            shforward = intermediate_path + "/{sample}_R1_clean.fastq.gz",
            shreverse = intermediate_path + "/{sample}_R2_clean.fastq.gz"
        singularity:
            "rasflow_edc.simg"
        shell:
            """
            trim_galore {options} --fastqc --j 4 --paired --basename {wildcards.sample} -o {intermediate_path} {input.fw} {input.rv}
            rename 's/\_val_1.fq/\_R1_clean.fastq/' {intermediate_path}/{wildcards.sample}*    # rename 's/\.DAT/\.dat/' *
            rename 's/\_val_2.fq/\_R2_clean.fastq/' {intermediate_path}/{wildcards.sample}* 
            #rename _val_2.fq _R2_clean.fastq {intermediate_path}/{wildcards.sample}*
            #rename _val_1.fq _R1_clean.fastq {intermediate_path}/{wildcards.sample}*
            """
    
   
   #### single end, to test
else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}*.f*q.gz {output.read}")
            
    rule trimS:
        input:
            "rasflow_edc.simg",
            read = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            read_trim = intermediate_path + "/{sample}_clean.fastq.gz"
        singularity:
            "rasflow_edc.simg"        
        shell:
            """
            trim_galore {options} --fastqc -j 4 --basename {wildcards.sample} -o {intermediate_path} {input.read}
            rename 's/\_trimmed.fq/\_clean.fastq/' {intermediate_path}/{wildcards.sample}*        
            #rename _trimmed.fq _clean.fastq {intermediate_path}/{wildcards.sample}*
            """

rule summaryReport:
    input:
        trimFiles
    output:
        report = final_path + "/fastqc_after_trimming/report_quality_control_after_trimming.html"
    singularity:
        "rasflow_edc.simg"
    params:
        path = final_path + "/fastqc_after_trimming"
    shell:
        """
        cp {intermediate_path}/*fastqc* {params.path}
        cp {intermediate_path}/*report.txt {params.path}
        multiqc {params.path} --filename {output.report}
        """
