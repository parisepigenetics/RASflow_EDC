import pandas as pd
configfile: "configs/config_main.yaml"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
trimmed = config["TRIMMED"]
if trimmed == "yes": 
    input_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/trim"
else:
    input_path = config["READSPATH"]
key = config["KEY"]
end = config["END"]
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/genome"
index_path = config["INDEXPATH"]
index_base = config["INDEXBASE"]
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/genome"
alignmentQC = config["alignmentQC"]
counter = config["COUNTER"]
bwStranded = config["BWSTRANDED"]


if bwStranded == "no":
    rule end:
        input:
            report = final_path + "/report_count_"+counter+".html",
            bw = expand(final_path + "/bw/{sample}.bw", sample = samples),
            pca = final_path + "/countFile_"+counter+"/PCA.pdf"

if bwStranded == "yes" :
    rule end:
        input:
            pca = final_path + "/countFile_"+counter+"/PCA.pdf",
            report = final_path + "/report_count_"+counter+".html",
            bw_fw = expand(final_path + "/bw_str/{sample}_fw.bw", sample=samples),
            bw_rv = expand(final_path + "/bw_str/{sample}_rv.bw", sample=samples)

if bwStranded == "both":
    rule end:
        input:
            pca = final_path + "/countFile_"+counter+"/PCA.pdf",
            report = final_path + "/report_count_"+counter+".html",
            bw_fw = expand(final_path + "/bw_str/{sample}_fw.bw", sample=samples),
            bw_rv = expand(final_path + "/bw_str/{sample}_rv.bw", sample=samples),
            bw = expand(final_path + "/bw/{sample}.bw", sample = samples)


if end == "pair":
    rule getReads:
        output:
            fw = temp(intermediate_path + "/reads/{sample}_fw.fastq.gz"),
            rv = temp(intermediate_path + "/reads/{sample}_rv.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.fw}"),
            shell("ln -s {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.rv}")

else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("ln -s {params.input_path}/{wildcards.sample}*.f*q.gz {output.read}")

rule spliceSites:
    output:
        splicesites = intermediate_path + "/splicesites.txt"
    conda:
        "env.yaml"
    shell:
         "hisat2_extract_splice_sites.py {config[ANNOTATION]} > {output.splicesites}"

if end == "pair":
    rule alignment:
        input:
            splicesites = intermediate_path + "/splicesites.txt",
            fw = intermediate_path + "/reads/{sample}_fw.fastq.gz",
            rv = intermediate_path + "/reads/{sample}_rv.fastq.gz"
        output:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
        conda:
            "env.yaml"
        params:
            index = index_path +"/" + index_base
        benchmark:
            intermediate_path + "/benchmarks/{sample}.hisat2.benchmark.txt"
        shell:
            "hisat2 -p {config[NCORE]} --known-splicesite-infile {input.splicesites} -x {params.index} -1 {input.fw} -2 {input.rv} | samtools sort -O BAM > {output.sort}"
else:
    rule alignment:
        input:
            indexes = directory(intermediate_path + "/indexes"),
            splicesites = intermediate_path + "/splicesites.txt",
            fw = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
        conda:
            "env.yaml"
        params:
            index = intermediate_path + "/indexes/index"
        benchmark:
            intermediate_path + "/benchmarks/{sample}.hisat2.benchmark.txt"
        shell:
            "hisat2 -p {config[NCORE]} --known-splicesite-infile {input.splicesites} -x {params.index} -U {input.fw} | samtools sort -O BAM > {output.sort}"


rule BamIndex:
    input:
        sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
    output:
        bai = intermediate_path + "/bamFileSort/{sample}.sort.bam.bai"
    conda:
        "env.yaml"
    shell:
        "samtools index {input.sort}"


if bwStranded == "yes" or bwStranded == "both":
    rule BigWigF:
        input:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
            bai = intermediate_path + "/bamFileSort/{sample}.sort.bam.bai"
        output:
            bw_fw = final_path + "/bw_str/{sample}_fw.bw"
        conda:
            "env.yaml"
        shell:
            "bamCoverage -b {input.sort} --filterRNAstrand forward -o {output.bw_fw} -p max"
            
    rule BigWigR:
        input:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
            bai = intermediate_path + "/bamFileSort/{sample}.sort.bam.bai"
        output:
            bw_rv = final_path + "/bw_str/{sample}_rv.bw"
        conda:
            "env.yaml"
        shell:
            "bamCoverage -b {input.sort} --filterRNAstrand reverse -o {output.bw_rv} -p max"

    

if bwStranded == "no" or bwStranded == "both" :
    rule BigWig:
        input:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
            bai = intermediate_path + "/bamFileSort/{sample}.sort.bam.bai"
        output:
            bw = final_path + "/bw/{sample}.bw"
        conda:
            "env.yaml"
        shell:
            "bamCoverage -b {input.sort} -o {output.bw} -p max"

if counter == "featureCounts":
    if end == "pair":
        rule featureCount:
            input:
                sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
                annotation = config["ANNOTATION"]
            output:
                countF = final_path + "/countFile_featureCounts/{sample}_count.tsv",
                WholeTable = final_path + "/countFile_featureCounts/{sample}_table.tsv",
                count_summary = final_path + "/countFile_featureCounts/{sample}_table.tsv.summary"
            conda:
                "env.yaml"
            shell:
                "featureCounts -p -T {config[NCORE]} -t {config[FEATURE]} -g {config[ATTRIBUTE]} -a {input.annotation} -o {output.WholeTable} {input.sort} && tail -n +3 {output.WholeTable} | cut -f1,7 > {output.countF}"
    else :
        rule featureCount:
            input:
                sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
                annotation = config["ANNOTATION"]
            output:
                countF = final_path + "/countFile_featureCounts/{sample}_count.tsv",
                WholeTable = final_path + "/countFile_featureCounts/{sample}_table.tsv",
                count_summary = final_path + "/countFile_featureCounts/{sample}_table.tsv.summary"
            conda:
                "env.yaml"
            shell:
                "featureCounts -T {config[NCORE]} -t {config[FEATURE]} -g {config[ATTRIBUTE]} -a {input.annotation} -o {output.WholeTable} {input.sort} && tail -n +3 {output.WholeTable} | cut -f1,7 > {output.countF}"

    rule PCA:
        input:
            countF = expand(final_path + "/countFile_featureCounts/{sample}_count.tsv", sample=samples)
        output:
            pca = final_path + "/countFile_featureCounts/PCA.pdf"
        conda:
            "env.yaml"
        params:
            count_path = final_path + "/countFile_featureCounts"
        shell:
            "Rscript scripts/pca.R {params.count_path}"

    rule summaryReport:
        input:
            count_summary = expand(final_path + "/countFile_featureCounts/{sample}_table.tsv.summary", sample=samples)
        output:
            report = final_path + "/report_count_featureCounts.html"
        conda:
            "env.yaml"
        shell:
            "multiqc {input.count_summary} --filename {output.report}"



elif counter == "htseq-count":
    if end == "pair":
        rule htseqCount:
            input:
                sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
                annotation = config["ANNOTATION"]
            output:
                countF = final_path + "/countFile_htseq-count/{sample}_count.tsv",
                count_summary = final_path + "/countFile_htseq-count/{sample}_table.tsv.summary",
                tmp = temp(final_path + "/countFile_htseq-count/{sample}_count.tmp")
            conda:
                "env.yaml"
            shell:
                "htseq-count -r pos -f bam -i {config[ATTRIBUTE]} -s {config[STRAND]} -t {config[FEATURE]} -c {output.tmp} {input.sort} {input.annotation} && sed '/^__/ d' {output.tmp} > {output.countF} && grep '__' {output.tmp} > {output.count_summary}"
    else: 
        rule htseqCount:
            input:
                sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
                annotation = config["ANNOTATION"]
            output:
                countF = final_path + "/countFile_htseq-count/{sample}_count.tsv",
                count_summary = final_path + "/countFile_htseq-count/{sample}_table.tsv.summary",
                tmp = temp(final_path + "/countFile_htseq-count/{sample}_count.tmp")
            conda:
                "env.yaml"
            shell:
                "htseq-count -f bam -i {config[ATTRIBUTE]} -s {config[STRAND]} -t {config[FEATURE]} -c {output.tmp} {input.sort} {input.annotation} && sed '/^__/ d' {output.tmp} > {output.count.countF} && grep '__' {output.tmp} > {output.count_summary}"

    rule PCA:
        input:
            countF = expand(final_path + "/countFile_htseq-count/{sample}_count.tsv", sample=samples)
        output:
            pca = final_path + "/countFile_htseq-count/PCA.pdf"
        conda:
            "env.yaml"
        params:
            count_path = final_path + "/countFile_htseq-count"
        shell:
            "Rscript scripts/pca.R {params.count_path}"

    rule summaryReport:
        input:
            countF =  expand(final_path + "/countFile_htseq-count/{sample}_table.tsv.summary", sample = samples)
        output:
            report = final_path + "/report_count_htseq-count.html"
        conda:
            "env.yaml"
        shell:
            "multiqc {input.countF} --filename {output.report}"


if alignmentQC:

    rule AQC:
        input:
            report = final_path + "/report_align.html"

    rule alignmentQC:
        input:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
        output:
            bamqc = directory(final_path + "/alignmentQC/{sample}_BAMqc")
        conda:
            "env.yaml"
        shell:
            "qualimap bamqc -bam {input.sort} -nt {config[NCORE]} --java-mem-size=6G -outdir {output.bamqc}"

    rule MappingReport:
        input:
            bamqc = expand(final_path + "/alignmentQC/{sample}_BAMqc", sample = samples),
        output:
            report = final_path + "/report_align.html"
        conda:
            "env.yaml"
        shell:
            "multiqc {input.bamqc} --filename {output.report}"
